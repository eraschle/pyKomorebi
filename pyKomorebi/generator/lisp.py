from pyKomorebi.generator import AGenerator
from pyKomorebi.model import ApiCommand, CommandArgs
from pyKomorebi import utils


class LispGenerator(AGenerator):
    name_replacement = [" ", "_"]

    def __init__(self):
        super().__init__(extension=".el", indent="  ")

    def _lisp_name(self, name: str) -> str:
        for char in self.name_replacement:
            name = name.replace(char, "-")
        return name

    def is_interactive(self, command: ApiCommand) -> bool:
        return len(command.arguments) == 0

    def _function_name(self, command: ApiCommand) -> str:
        names = ["komorebi"]
        if not self.is_interactive(command):
            names.append("api")
        names.append(command.name)
        return "-".join(names)

    def _arguments_names(self, command: ApiCommand) -> str:
        if len(command.arguments) == 0:
            return ""
        args = [self._lisp_name(arg.name.lower()) for arg in command.arguments]
        return " ".join(args)

    def _arguments(self, command: ApiCommand) -> str:
        if len(command.arguments) == 0:
            return ""
        arg_str = self._arguments_names(command)
        return f"&key {arg_str}"

    def _name_and_description(self, args: CommandArgs, max_length: int) -> list[str]:
        with_default = len(args.full_name(with_default=True)) <= max_length
        values = [args.full_name(with_default)]
        values.append(args.description(not with_default))
        return utils.concat_values(values, max_length, separator=" ")

    def _possible_values(self, args: CommandArgs, max_length: int) -> list[str]:
        if len(args.possible_values) == 0:
            return []
        values = utils.concat_values(args.possible_values, max_length, separator=",")
        if len(values) == 1:
            line = f"Possible values: {values[0]}"
            if len(line) <= max_length:
                return [line]
        values = ["Possible values:"] + values
        return utils.concat_values(values, max_length, separator=",")

    def _options_docstring(self, command: ApiCommand, max_length: int) -> list[str]:
        doc_lines = []
        for opt in command.options:
            values = self._name_and_description(opt, max_length)
            values.extend(self._possible_values(opt, max_length))
            doc_lines.append(self._line("\n".join(values), level=0))
        return utils.clean_none_or_empty(doc_lines, strip=True)

    def _argument_docstring(self, command: ApiCommand, max_length: int) -> list[str]:
        doc_lines = []
        for arg in command.arguments:
            values = self._name_and_description(arg, max_length)
            values.extend(self._possible_values(arg, max_length))
            doc_lines.append(self._line("\n".join(values), level=0))
        return utils.clean_none_or_empty(doc_lines, strip=True)

    def _command_docstring(self, command: ApiCommand, max_length: int) -> list[str]:
        doc_lines = []
        command_doc_lines = utils.ensure_max_length(command.description, max_length, split=" ")
        for idx, line in enumerate(command_doc_lines):
            if idx == 0:
                doc_lines.append(self._line(f'"{line}', level=1))
            elif len(line) == 0:
                continue
            else:
                doc_lines.append(self._line(line, level=0))
        return doc_lines

    def _docstring(self, command: ApiCommand, max_length: int) -> list[str]:
        doc_lines = self._command_docstring(command, max_length)
        if len(command.arguments) > 0:
            doc_lines.append("")
            doc_lines.append(self._line("Arguments:", level=0))
            doc_lines.extend(self._argument_docstring(command, max_length))
        if len(command.options) > 0:
            doc_lines.append("")
            doc_lines.append(self._line("Options:", level=0))
            doc_lines.extend(self._options_docstring(command, max_length))
        doc_lines = utils.clean_none_or_empty(doc_lines, strip=True)
        doc_lines[-1] = f'{doc_lines[-1]}"'
        return doc_lines

    def _command_call(self, command: ApiCommand) -> str:
        args = self._arguments_names(command)
        return f'(komorebi-api--execute "{command.name}" {args})'

    def create_content(self, code_lines: list[str]) -> list[str]:
        lines = [";;; Code generated by pyKomorebi", ""]
        lines.extend(code_lines)
        return lines

    def generate(self, command: ApiCommand, max_length: int = 80) -> list[str]:
        lines = []
        func_args = self._arguments(command)
        func_name = self._function_name(command)
        lines.append(self._line(f'(cl-defun {func_name} ({func_args})', level=0))
        lines.extend(self._docstring(command, max_length))
        if self.is_interactive(command):
            lines.append(self._line("(interactive)", level=1))
        lines.append(self._line(self._command_call(command), level=1))
        lines.append(self._line(")", level=0))
        return lines
